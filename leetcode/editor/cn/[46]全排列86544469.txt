class Solution {
    public List<List<Integer>> permute(int[] nums) {
        ArrayList<List<Integer>> lists = new ArrayList<>();
        List<Integer> collect = Arrays.stream(nums).boxed().collect(Collectors.toList());
        sdf(lists, new ArrayDeque<>(), collect, 0, nums.length);
        return lists;
    }

    private void sdf(List<List<Integer>> result, Deque<Integer> path, List<Integer> nums, int depth, int length) {
        if (depth == length) {
            System.out.println("[o]" + path);
            result.add(new ArrayList<>(path));
            return;
        }
        for (int i = 0; i < nums.size(); i++) {
            Integer integer = nums.get(i);
            path.addLast(integer);
            ArrayList<Integer> tNums = new ArrayList<>(nums);
            tNums.remove(i);
            sdf(result, path, tNums, depth + 1, length);
            path.removeLast();
        }
    }
}
//runtime:20 ms
//memory:39.5 MB
