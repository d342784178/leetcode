class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> list = Arrays.stream(candidates).boxed().collect(Collectors.toList());
        sdf(result, new ArrayDeque<>(), list, target);
        return result;
    }

    private int sdf(List<List<Integer>> result, Deque<Integer> path, List<Integer> candidates, int target) {
        // 结束条件,没有子节点||target<0
        if (candidates.size() == 0 || target < 0) {
            // System.out.println("[x]:" + path);
            return -1;
        }
        if (target == 0) {
            // target==0 符合条件,加入result中
            // System.out.println("[o]:" + path);
            result.add(new ArrayList<>(path));
            return 0;
        }
        Iterator<Integer> iterator = candidates.iterator();
        while (iterator.hasNext()) {
            Integer next = iterator.next();
            path.addLast(next);
            int s = sdf(result, path, new ArrayList<>(candidates), target - next);
            path.removeLast();
            iterator.remove();
            if (s < 0) {
                break;
            }
        }
        return 0;
    }
}

//runtime:10 ms
//memory:39.3 MB
